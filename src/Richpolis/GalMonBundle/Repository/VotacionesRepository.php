<?php

namespace Richpolis\GalMonBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * VotacionesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VotacionesRepository extends EntityRepository
{
    public function getMaxPosicion() {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT MAX(v.posicion) as value 
            FROM RichpolisGalMonBundle:Votaciones v 
            ORDER BY v.posicion ASC
            ');
        $max = $query->getResult();
        return $max[0]['value'];
    }
    
    public function getRegistroPorIdConSemana($id){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
            SELECT v  
            FROM RichpolisGalMonBundle:Votaciones v 
            LEFT JOIN v.semana s 
            LEFT JOIN v.fan f 
            WHERE v.id=:id
            ')->setParameters(array('id'=>$id));
        return $query->getSingleResult();
    }
    
    public function getQueryVotacionesPorSemana($semana,$active=true){
        $query=$this->createQueryBuilder('v')
                    ->where('v.semana=:semana')
                    ->setParameter('semana', $semana)
                    ->andWhere('v.isActive=:active')
                    ->setParameter('active', $active)
                    ->orderBy('v.posicion','ASC');
        return $query;
    }
    
    public function getVotacionesPorSemana($semana,$active=true){
        $query=$this->getQueryVotacionesPorSemana($semana, $active);
        return $query->getQuery()->getResult();
    }
    
    public function getQueryVotacionesPorSemanaYStatus($semana,$active){
        $em=$this->getEntityManager();
        $query=$em->createQuery('
            SELECT g  
            FROM RichpolisGalMonBundle:Votaciones g 
            WHERE g.isActive=:active 
            AND g.semana=:semana 
            ORDER BY g.posicion ASC
            ')->setParameters(array('semana'=>$semana,'active'=>$active));
        return $query;
    }
    
    public function getVotacionesPorSemanaYStatus($semana,$active){
        $query=$this->getQueryVotacionesPorSemanaYStatus($semana, $active);
        return $query->getResult();
    }
}