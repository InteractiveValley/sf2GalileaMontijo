<?php

namespace Richpolis\GalMonBundle\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;


/**
 * UsuariosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuariosRepository extends EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
        ;

        try {
            // El método Query::getSingleResult() lanza una excepción
            // si no hay algún registro que coincida con los criterios.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin RichpolisGalMonBundle:Usuarios object identified by "%s".', $username), 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }
    
    public function getMaxPosicion() {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT MAX(u.posicion) as value 
            FROM RichpolisGalMonBundle:Usuarios u 
            ORDER BY u.posicion ASC
            ');
        $max = $query->getResult();
        return $max[0]['value'];
    }
    
    public function getQueryUsuariosActivas($todas=false){
        $query=$this->createQueryBuilder('u')
                    ->orderBy('u.posicion', 'ASC');
        if(!$todas){
            $query->where('u.isActive=:active')
                  ->setParameter('active', true);
        }
        return $query->getQuery();
    }
    
    public function getUsuariosActivas($todas=false){
        $query=$this->getQueryUsuariosActivas($todas);
        return $query->getResult();
    }
    
}